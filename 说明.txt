

本项目对比 springMVC的拦截器、servlet的过滤器Filter、监听器listener
第一、springmvc拦截器和servlet过滤器的区别
http://elim.iteye.com/blog/1750680
http://blog.csdn.net/chenleixing/article/details/44573495
第二、Servlet中的过滤器(拦截器)Filter与监听器Listener的作用和区别
http://m.blog.csdn.net/x_yp/article/details/6358630
http://www.360doc.com/content/17/1019/10/48597276_696309074.shtml

运行：
现在jar要求的默认的springmvc的xml名称默认为：
SpringMVC-servlet.xml
访问：端口为 8082
注意本案例中监听器生成的tomcat的dbcp是应用tomcat8的包，本机是 eclipse-apache-tomcat-8.0.24
直接运行
http://localhost:8082/tech39SpringFilter
或者详细运行：
特殊请求拦截
http://localhost:8082/tech39SpringFilter/control/only
全局拦截
http://localhost:8082/tech39SpringFilter/control/get

注意：过滤器不起作用情况： 原来写的是"/"
确认tomcat的项目中:
过滤器没写错，web.xml的过滤器配置没写错,是过滤所有文件"/*"


模板来源： tech27SringMVC
过滤器和拦截器的区别：
　　①拦截器是基于java的反射机制的，而过滤器是基于函数回调。
　　②拦截器不依赖与servlet容器，过滤器依赖与servlet容器。
　　③拦截器只能对action请求起作用，而过滤器则可以对几乎所有的请求起作用。
　　④拦截器可以访问action上下文、值栈里的对象，而过滤器不能访问。
　　⑤在action的生命周期中，拦截器可以多次被调用，而过滤器只能在容器初始化时被调用一次。
　　⑥拦截器可以获取IOC容器中的各个bean，而过滤器就不行，这点很重要，在拦截器里注入一个service，可以调用业务逻辑。

拦截器：
第一、拦截方式：
springMVC的拦截器interceptor拦截请求是通过HandleInterceptor来实现的。有两种方式：
第一种方式是要定义的Interceptor类要实现了Spring 的HandlerInterceptor 接口，或者是这个类继承实现了HandlerInterceptor 接口的类，比如Spring 已经提供的实现了HandlerInterceptor 接口的抽象类HandlerInterceptorAdapter ；
第二种方式是实现Spring的WebRequestInterceptor接口，或者是继承实现了WebRequestInterceptor的类。
第二、范围：
第一种是全部的control
第二种是针对个别方法
第三：执行顺序：
拦截器的执行顺序是按声明的先后顺序执行的，先声明的拦截器中的preHandle方法会先执行，然而它的postHandle方法和afterCompletion方法却会后执行。
  在mvc:interceptors标签下声明interceptor主要有两种方式：
            （1）直接定义一个Interceptor实现类的bean对象。使用这种方式声明的Interceptor拦截器将会对所有的请求进行拦截。
            （2）使用mvc:interceptor标签进行声明。使用这种方式进行声明的Interceptor可以通过mvc:mapping子标签来定义需要进行拦截的请求路径。



1.过滤器 Servlet中的过滤器Filter
主要的用途是过滤字符编码、做一些业务逻辑判断等。其工作原理是，只要你在web.xml文件配置好要拦截的客户端请求，它都会帮你拦截到请求，此时你就可以对请求或响应(Request、Response)统一设置编码，简化操作；同时还可进行逻辑判断，如用户是否已经登陆、有没有权限访问该页面等等工作。它是随你的web应用启动而启动的，只初始化一次，以后就可以拦截相关请求，只有当你的web应用停止或重新部署的时候才销毁
所谓过滤器顾名思义是用来过滤的，在java web中，你传入的request,response提前过滤掉一些信息，或者提前设置一些参数，然后再传入servlet或者struts的action进行业务逻辑，比如过滤掉非法url（不是login.do的地址请求，如果用户没有登陆都过滤掉）,或者在传入servlet或者struts的action前统一设置字符集，或者去除掉一些非法字符（聊天室经常用到的，一些骂人的话）。filter 流程是线性的， url传来之后，检查之后，可保持原来的流程继续向下执行，被下一个filter, servlet接收等.
2.监听器 Servlet的监听器Listener
它是实现了javax.servlet.ServletContextListener 接口的服务器端程序，它也是随web应用的启动而启动，只初始化一次，随web应用的停止而销毁。主要作用是： 做一些初始化的内容添加工作、设置一些基本的内容、比如一些参数或者是一些固定的对象等等。
这个东西在c/s模式里面经常用到，他会对特定的事件产生产生一个处理。监听在很多模式下用到。比如说观察者模式，就是一个监听来的。又比如struts可以用监听来启动。Servlet监听器用于监听一些重要事件的发生，监听器对象可以在事情发生前、发生后可以做一些必要的处理。
3.拦截器
拦截器是在面向切面编程中应用的，就是在你的service或者一个方法前调用一个方法，或者在方法后调用一个方法。是基于JAVA的反射机制。拦截器不是在web.xml，比如struts在struts.xml中配置
public Object invoke(Object proxy, Method method, Object[] args) throws Throwable
{
	Object result = null;
	System.out.println("before invoke method :" + method.getName());
	result = method.invoke(this.targetObj, args);
	System.out.println("after invoke method : " + method.getName());
	return result;
}
主要是用在插件上，扩展件上比如 hivernate spring struts2等 有点类似面向切片的技术，在用之前先要在配置文件即xml文件里声明一段的那个东西。






